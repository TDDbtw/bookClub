include ../partials/sidemenu
include ../partials/mixins

#content-wrapper
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css", integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN", crossorigin="anonymous")
  link(rel="stylesheet", href="../../stylesheet/user/table.css")
  link(rel="stylesheet", href="../../stylesheet/admin/offerList.css")
  script(src="https://code.jquery.com/jquery-3.5.1.slim.min.js", integrity="sha384-DfXdz2htPH00kS58PrEW3hmvZFEMg9Supu4T9jwmg/UplcUJOua9e+06TIzrkOnQ", crossorigin="anonymous")
  script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js", integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns", crossorigin="anonymous")
  //- script(defer src="../../script/admin/panel.js") 
  .container-fluid#containerFluid
    .container-fluid#containerFluid
      section.dashboard-overview
        h2 Overview
        .metric-grid
          .metric-card
            i.fas.fa-book(aria-hidden="true") 
            .metric-data
              h2#totalProductsCount
              h3  #{totalCount} 
              p  totalProducts
               
          .metric-card
            i.fas.fa-list-alt(aria-hidden="true")
            .metric-data
              h2#totalCategoriesCount
              h3  #{active} 
              p  Listed Products

    h1.text-center.text-light.my-5 #{name}
    a#createProduct.btn.btn-primary.mb-3(href="/admin/products/create") Create Product
    table#my-table.table-sortable
      thead#contentThead
        tr#contentTheadTr
          //- th(scope="col") #
          th(scope="col") Name
          th(scope="col") Price
          th(scope="col") Stock
          th(scope="col") Image
          th(scope="col") status
          th(scope="col") List/Unlist
          //- th(scope="col") 
          th(scope="col") Actions
      tbody#contentTbody
        each product in products
          tr#contentTbodyTr
            //- th(scope="row") #{product._id}
            td #{product.name}
            //- td #{product.description}
            td #{product.price}
            //- td #{product.category.name}
            td #{product.stockCount}
            td
              img(src=product.image && product.image[0], alt="Product image", class="img-thumbnail" width="70" )
            td#status.status #{product.status ? 'Active' : 'Unlisted'}
            td
              .toggle-button-cover
                .button-cover
                  #button-2.button.r
                    input#checkbox.checkbox(type="checkbox" data-status=product.status data-id=product.id)
                    .knobs
                    .layer
            td#ed
              a.btn.btn-sm.text-warning(href=`/admin/products/${product._id}/edit` style="width:5rem;") Edit
              | &nbsp;
              a#deleteButton.btn.btn-sm.text-danger( data-id=product.id onclick="removeProduct()" style="width:5rem;") Delete 
              input#productId(type='hidden' value=`${product._id}`)
    .pagination
      ol#numbers
 

  script(src="../../script/admin/pagination.js")
  script(src="../../script/admin/adminSearch.js")
  script(src="../../script/user/sortTable.js")

  script.
       var navSearchInput = document.getElementById("adminSearch");
    // Add an event listener to the input element for the input event
    navSearchInput.addEventListener("input", function() {
      // Log the value of the input to the console
      let searchValue=navSearchInput.value;
      //- console.log("Input value:", searchValue);
      getSearchProducts(searchValue)

    });
    
    const buttons = document.querySelectorAll('a[data-id]');
    
     buttons.forEach(button => {
      button.addEventListener('click', (e) => {
        console.log(e.target.dataset.id);
        removeProduct(e.target.dataset.id)
      });
    });
    async function removeProduct(productId) {

    const result = await Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    });

    if (result.isConfirmed) {
    try {
      const response = await fetch(`/admin/products/${productId}/delete`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ productId: productId}),
      });
  
      const data = await response.json();
  
      if (data.success) {
        Swal.fire(
          'Deleted!',
          'Your category has been deleted.',
          'success'
        );
        window.location.href = "/admin/products";
      }
    } catch (error) {
      console.error("Error:", error);
      // Handle errors as needed
    }}
    }
    const items = document.querySelectorAll('input[data-id]');
    
     items.forEach(item => {
      item.addEventListener('change', (e) => {
        //- console.log(e.target.dataset.status);
        let id =e.target.dataset.id;
        productStatus(id)
      });
    });
    async function productStatus(id) {
      console.log(id);
      try {
      const response = await fetch(`/admin/products/${id}/edit`, {
        method: "put",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ status: "change"}),
      });
  
      const data = await response.json();
  
      if (data.success) {
        window.location.href = "/admin/products";
      }
    } catch (error) {
      console.error("Error:", error);
      // Handle errors as needed
    }

      console.log(status)
    }
    const switchInputs = document.querySelectorAll('.checkbox');
    const statuses = document.querySelectorAll('.status');
      switchInputs.forEach((switchInput, index) => {
    statuses[index].innerText === 'Unlisted'?statuses[index].style.color="#912727":statuses[index].style.color="green"

    // Check the checkbox based on the initial value of the 'status' element
    switchInput.checked =(statuses[index].innerText === 'Unlisted')?true:false
       
        
      })


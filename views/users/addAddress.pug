include ../partials/navbar
link(rel='stylesheet', href='https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap')
link(rel='stylesheet', href='../../stylesheet/navbar.css')
script(src='../../script/toast.js' defer)
script(defer src='https://unpkg.com/htmx.org@2.0.0', integrity='sha384-wS5l5IKJBvK6sPTKa2WZ1js3d947pvWXbPJ1OmWfEuxLgeHcEbjUUA5i9V5ZkpCw', crossorigin='anonymous')
title Address Book

style.
  body {
    font-family: 'Roboto', sans-serif;
    background-color: #081c15;
    color: #e0e0e0;
    line-height: 1.6;
  }
  .container {
    max-width: 90vw;
    margin: 40px auto;
    padding: 0 20px;
  }
  .page-title {
    font-size: 2rem;
    color: #ffffff;
    margin-bottom: 30px;
    text-align: center;
  }
  .account-layout {
    display: flex;
    gap: 30px;
  }
  .account-menu {
    flex: 0 0 250px;
    background: #0f2a20;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    padding: 20px;
  }
  .account-menu ul {
    list-style: none;
    padding: 0;
  }
  .account-menu li {
    margin-bottom: 10px;
  }
  .account-menu a {
    display: block;
    padding: 10px 15px;
    color: #b8c9c5;
    text-decoration: none;
    border-radius: 5px;
    transition: background-color 0.3s ease;
  }
  .account-menu a:hover, .account-menu a.active {
    background-color: #1a4734;
    color: #ffffff;
  }
  .main-content {
    flex: 1;
    background: #0f2a20;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    padding: 30px;
  }
  .address-card {
    background: #1a4734;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
  }
  .address-header {
    font-size: 1.2rem;
    color: #ffffff;
    margin-bottom: 10px;
  }
  .address-items {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  .address-items h3 {
    font-size: 1rem;
    color: #b8c9c5;
    margin: 0;
  }
  .address-items small {
    color: #ffffff;
  }
  .address-actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
  }
  .btn {
    padding: 8px 15px;
    border-radius: 5px;
    text-decoration: none;
    transition: background-color 0.3s ease;
  }
  .btn-edit {
    background-color: #2d6a4f;
    color: #ffffff;
  }
  .btn-edit:hover {
    background-color: #40916c;
  }
  .btn-delete {
    background-color: #e74c3c;
    color: #ffffff;
  }
  .btn-delete:hover {
    background-color: #c0392b;
  }
  .address-defaults {
    margin-top: 15px;
  }
  .address-defaults label {
    margin-left: 5px;
    color: #b8c9c5;
  }
  .default-address {
    color: #52b788;
    font-weight: 600;
  }
  form {
    margin-top: 30px;
  }
  .form-group {
    margin-bottom: 20px;
  }
  label {
    display: block;
    margin-bottom: 5px;
    color: #b8c9c5;
  }
  input[type="text"], select {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 5px;
    background: #2d6a4f;
    color: #ffffff;
  }
  input[type="text"]::placeholder, select::placeholder {
    color: #b8c9c5;
  }
  button[type="submit"] {
    background-color: #40916c;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  button[type="submit"]:hover {
    background-color: #52b788;
  }
  .error-message {
    color: #e74c3c;
    font-size: 0.9rem;
    margin-top: 5px;
  }
  .grid{
    display:flex ;
   }

  input[type=radio] {
    margin-end:2px;
    }

.container
  h1.page-title Address Book

  .account-layout
    .account-menu
      ul
        li: a(href='/user/profile') My Account
        li: a(href='/user/wishlist') My Wishlist
        li: a(href='/user/address/new', class='active') Address Book
        li: a(href='/user/order') My Orders
        li: a(href='/user/wallet') My Wallet

    .main-content
      if user.addresses && user.addresses.length > 0
        .addresses-list
          each address, index in user.addresses
            .address-card
              input#addressInput(type='hidden' value=address._id)
              p.address-header Address #{index + 1}
              .address-items
                h3 Address:
                small #{address.address}
                h3 City:
                small #{address.city}
                h3 State:
                small #{address.state}
                h3 Zip Code:
                small #{address.zip_code}
                h3 Country:
                small #{address.country}

              .address-actions
                a.btn.btn-edit(href=`/user/address/${address._id}/edit`) Edit
                a.btn.btn-delete(href='#', onclick=`removeAddress('${address._id}')`)
                  svg.icon.icon-tabler.icon-tabler-trash(xmlns='http://www.w3.org/2000/svg', width='20', height='20', viewBox='0 0 24 24', stroke-width='1.5', stroke='#ffffff', fill='none', stroke-linecap='round', stroke-linejoin='round')
                    path(stroke='none', d='M0 0h24v24H0z', fill='none')
                    path(d='M4 7l16 0')
                    path(d='M10 11l0 6')
                    path(d='M14 11l0 6')
                    path(d='M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12')
                    path(d='M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3')

              .address-defaults
                if user.billing_address && user.billing_address._id == address.id
                  p.default-address Current Billing Address
                else
                  .grid
                    input#billing_address(type='radio', hx-get='/user/set', hx-trigger='change', name='billing_address', value=address._id)
                    label(for='billing_address') Set as Billing Address

                if user.shipping_address && user.shipping_address._id == address.id
                  p.default-address Current Shipping Address
                else
                  .grid
                    input#shipping_address(type='radio', hx-get='/user/set', hx-trigger='change', name='shipping_address', value=address._id)
                    label(for='shipping_address') Set as Shipping Address

      else
        p You have not added any addresses yet.

      form#form-validate(action='/user/address/new', method='post', enctype='application/x-www-form-urlencoded')
        h2 Add New Address

        .form-group
          label(for='address'  ) Street Address
          input#address(type='text', name='address', placeholder='Enter your street address', oninput='validateAddress()')
          span#addressError.error-message

        .form-group
          label(for='country' ) Country
          select#country(name="country"   title='Country' oninput='validateCountry()' data-country=countries data-validate="{'validate-select':true}" aria-required='true')
            option(value='') Select a Country
            each country in countries
              option(value=country.name)= country.name
          span#countryError.error-message

        .form-group
          label(for='state' ) State
          select#state(name='state', oninput='validateState()' )
            option(value='') Select a State
          span#stateError.error-message

        .form-group
          label(for='city' ) City
          input#city(type='text', name='city', placeholder='Enter your city', oninput='validateCity()')
          span#cityError.error-message

        .form-group
          label(for='zip' ) Zip Code
          input#zip(type='text', name='zip_code', oninput='validateZip()' placeholder='Enter your zip code' )
          span#zipError.error-message
        button#saveAddress(type='submit') Save Address
        input#userInput(type='hidden' value=user)

script(src="../../script/user/addAddress.js")
script.
  $(document).ready(function() {
    var currentUrl = window.location.pathname;
    $('.my-account-menu li a').each(function() {
      var href = $(this).attr('href');
     console.log(`href isss ... ${href}`) 
     console.log(`url isss ... ${currentUrl}`) 
      if (currentUrl === href) {
        $(this).parent('li').css('background', 'linear-gradient(to right, #b71540, #e55039)');
      }
    });
  });

  const countrySelect = document.getElementById('country');
  const stateSelect = document.getElementById('state');
  const countryData = countrySelect.getAttribute('data-country');
  const countries = JSON.parse(countryData);

  countrySelect.addEventListener('change', () => {
    stateSelect.innerHTML = '';
    const selectedCountry = countrySelect.value;
    const states = countries.find(country => country.name === selectedCountry).states;
    states.forEach(state => {
      const option = document.createElement('option');
      option.value = state;
      option.textContent = state;
      stateSelect.appendChild(option);
    });
  });

    const empty = document.createElement('option');
    empty.value = ''
    empty.textContent = 'Select a Country'
    countrySelect.appendChild(empty);


// Your existing JavaScript code here
// (Country and state selection logic, validation, etc.)

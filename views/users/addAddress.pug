include ../partials/navbar
link(rel='stylesheet' href='../../stylesheet/user/addAddress.css')
link(rel='stylesheet' href='../../stylesheet/navbar.css')

.container-fluid#mainAdd
  .my-account
    .col-sm-3.my-account-menu
      ul
        li
          a(href='/user/profile') My Account
        li
          a(href='/user/wishlist') My Wishlist
        li
          a(href='/user/profile/edit') Account Information
        li
          a(href='/user/address/new') Address Book
        li
          a(href='/user/order') My Orders
        li
          a(href='#') My Wallet

  .column.main.snipcss-KcpgZ
    .page-title-wrapper
      h1.page-title
        span.base(data-ui-id='page-title-wrapper') Add New Address
    input(name='form_key' type='hidden' value='viRUoafbYsKQ7xXw')

    if user.addresses && user.addresses.length > 0
      .addresses-list
        each address, index in user.addresses
          .address-card
            p.address-header Address #{index + 1}
            .address-items
              p Address: #{address.address}
              p City: #{address.city}
              p State: #{address.state}
              p Zip Code: #{address.zip_code}
              p Country: #{address.country}
            .address-information-links
              a#editAddress(href=`/user/address/${address._id}/edit`) Edit
              input#addressInput(type="hidden", name="address", value=address._id)
              a#deleteAddress.text-danger.ms-3(address-id=address._id onclick="removeAddress()")
                svg.icon.icon-tabler.icon-tabler-trash(xmlns='http://www.w3.org/2000/svg', width='20', height='20', viewBox='0 0 24 24', stroke-width='1.5', stroke='#ff2825', fill='none', stroke-linecap='round', stroke-linejoin='round')
                  path(stroke='none', d='M0 0h24v24H0z', fill='none')
                  path(d='M4 7l16 0')
                  path(d='M10 11l0 6')
                  path(d='M14 11l0 6')
                  path(d='M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12')
                  path(d='M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3')

            .address-defaults
              if user.billing_address && user.billing_address._id == address._id
                p.mt-3(style="color: #007d99;") Default Billing Address
              else
                //input#billing_address(type="checkbox" name='billing_address' value=`${address._id}`).ms-3
                input#billing_address(hx-get="/user/set" type="checkbox" hx-trigger="change" name='billing_address' hx-target="body" value=`${address._id}`).ms-3
                label(for='billing_address').ms-1.me-2 Billing Address
              if user.shipping_address && user.shipping_address._id == address._id
                p.mt-3(style="color: #007d99;") Default Shipping Address
              else
                input#shipping_address(type="checkbox" name='shipping_address' value=`${address._id}`).ms-3
                label(for='shipping_address').ms-1 Shipping Address

            form.deleteForm(action=`/user/address/${address._id}/remove` method="delete")
              input#userInput(type="hidden" name="user" value=user.id)
              input#addressInput(type="hidden" name="address" value=address._id)

    else
      p You have not added any addresses yet.

    form#form-validate(action='/user/address/new', method='post', enctype='application/x-www-form-urlencoded')
      br
      .fieldset.fieldset.me-5
        .field.street.required
          label.label(for='street_1')
            span Street Address: Line 1
          .control
            input#address.input-text.required-entry(type='text' name='address'  oninput='validateAddress()' placeholder='Address' aria-required='true')
            span#addressError

        .field.country.required
          label.label(for='country')
            span Country
          .control
            select#country.required-entry(name="country"   title='Country' oninput='validateCountry()' data-country=countries data-validate="{'validate-select':true}" aria-required='true')
              option(value='') Please select a Country
              each country in countries
                option(value=country.name)= country.name
            span#countryError

        .field.region.required
          label.label(for='region_id')
            span State
          .control
            select#state(name='state')
              option(value='') Please select a region, state or province.
            span#stateError

        .field.city.required
          label.label(for='city')
            span City
          .control
            input#city.input-text.required-entry(type='text' name='city' oninput='validateCity()' aria-required='true')
            span#cityError

        .field.zip.required
          label.label(for='zip')
            span Zip Code
          .control
            input#zip.input-text.required-entry(type='text' name='zip_code' oninput='validateZip()' aria-required='true')
            span#zipError

        input(type='hidden' name='default_billing' value='1')
        input(type='hidden' name='default_shipping' value='1')

        .actions-toolbar
          .primary
            button#saveAddress.action.submit.primary(type='submit') Save Address
          .secondary
            a.action.back(href='/user/address/new') Go back
        span#errorMessage

  script(src="../../script/user/addAddress.js")
  script.
    $(document).ready(function() {
      var currentUrl = window.location.pathname;
      $('.my-account-menu li a').each(function() {
        var href = $(this).attr('href');
       console.log(`href isss ... ${href}`) 
       console.log(`url isss ... ${currentUrl}`) 
        if (currentUrl === href) {
          $(this).parent('li').css('background', 'linear-gradient(to right, #b71540, #e55039)');
        }
      });
    });

    const countrySelect = document.getElementById('country');
    const stateSelect = document.getElementById('state');
    const countryData = countrySelect.getAttribute('data-country');
    const countries = JSON.parse(countryData);

    countrySelect.addEventListener('change', () => {
      stateSelect.innerHTML = '';
      const selectedCountry = countrySelect.value;
      const states = countries.find(country => country.name === selectedCountry).states;
      states.forEach(state => {
        const option = document.createElement('option');
        option.value = state;
        option.textContent = state;
        stateSelect.appendChild(option);
      });
    });

      const empty = document.createElement('option');
      empty.value = ''
      empty.textContent = 'Select a Country'
      countrySelect.appendChild(empty);



include ../partials/navbar
link(rel='stylesheet', href='../../stylesheet/user/profile.css')
link(rel='stylesheet', href='../../stylesheet/user/orderList.css')
link(rel='stylesheet', href='https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap')
title My Orders
.container
  h1.page-title My Orders
  .account-layout
    .account-menu
      ul
        li: a(href='/user/profile') My Account
        li: a(href='/user/wishlist') My Wishlist
        li: a(href='/user/address/new') Address Book
        li: a(href='/user/order', class='active') My Orders
        li: a(href='/user/wallet') My Wallet

    .main-content
      if orders.length > 0
        table.order-table.table-sortable
          thead
            tr
              th Order ID
              th Order Date
              th Product(s)
              th Total
              th Payment Method
              th Status
              th Actions
          tbody
            each order in orders
              tr
                td(data-label="Order ID")= order._id
                td#createdDate(data-label="Order Date" data-orderdate=order.created_at)= moment(order.created_at).format('MM/DD/YYYY')
                td(data-label="Product(s)")
                  if order.items.length < 2
                    = order.items[0].name
                  else
                    | #{order.items[0].name}, #{order.items[1].name} 
                    - let len = order.items.length - 2
                    | and #{len} more..
                td(data-label="Total") $#{order.totalAmount.toFixed(2)}
                td(data-label="Payment Method")= order.payment_method
                td(data-label="Status")= order.returnRequest.status ? `Return ${order.returnRequest.status}` : order.status
                td(data-label="Actions")
                  a.order-details-btn.d-flex(href=`/user/order/${order._id}`) View Details
            each order in orders
              tr
                td= order._id
                td#createdDate(data-orderdate=order.created_at)= moment(order.created_at).format('MM/DD/YYYY')
                td
                  if order.items.length < 2
                    = order.items[0].name
                  else
                    | #{order.items[0].name}, #{order.items[1].name} 
                    - let len = order.items.length - 2
                    | and #{len} more..
                td $#{order.totalAmount.toFixed(2)}
                td= order.payment_method
                td= order.returnRequest.status ? `Return ${order.returnRequest.status}` : order.status
                td 
                  a.order-details-btn.d-flex(href=`/user/order/${order._id}`) View Details

        .pagination
          if currentPage > 1
            a.pagination-link(href=`/user/order?page=${currentPage - 1}`) Previous
          span Page #{currentPage} of #{totalPages}
          if currentPage < totalPages
            a.pagination-link(href=`/user/order?page=${currentPage + 1}`) Next
      else
        .order-empty
          p.no-order You haven't ordered any items yet!
          a.shop-button(href="/products") Shop Now

script(src="../../script/user/validateAddress.js")
script(src="../../script/user/sortTable.js")
script.
  document.addEventListener('DOMContentLoaded', function() {
    const currentUrl = window.location.pathname;
    document.querySelectorAll('.account-menu a').forEach(link => {
      if (link.getAttribute('href') === currentUrl) {
        link.classList.add('active');
      }
    });

    document.querySelectorAll('#createdDate').forEach(element => {
      const createdDate = element.dataset.orderdate;
      const date = new Date(createdDate);
      const formattedDate = date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      });
      element.textContent = formattedDate;
    });


    const transactionTable = document.querySelector('.order-table.table-sortable');
    
    function attachPaginationListeners() {
      const paginationLinks = document.querySelectorAll('.pagination-link');
      paginationLinks.forEach(link => {
        link.addEventListener('click', handlePaginationClick);
      });
    }

    function handlePaginationClick(e) {
      e.preventDefault();
      const url = this.getAttribute('href');
      
      fetch(url)
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newTransactions = doc.querySelector('.order-table.table-sortable');
          const newPagination = doc.querySelector('.pagination');
          
          if (newTransactions) {
            transactionTable.innerHTML = newTransactions.innerHTML;
          } else {
            transactionTable.innerHTML = '<tr><td colspan="4">No transactions on this page.</td></tr>';
          }
          
          // Check if pagination container exists before updating
          const paginationContainer = document.querySelector('.pagination');
          if (paginationContainer && newPagination) {
            paginationContainer.outerHTML = newPagination.outerHTML;
          } else if (newPagination) {
            // If pagination container doesn't exist, but new pagination does, append it
            transactionTable.parentNode.insertAdjacentHTML('beforeend', newPagination.outerHTML);
          }
          
          // Update the URL without reloading the page
          history.pushState(null, '', url);
          
          // Reattach event listeners to new pagination links
          attachPaginationListeners();
        });
    }

    // Initial attachment of event listeners
    attachPaginationListeners();
  });

include ../partials/navbar

title Order Detail

link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap")
link(rel="stylesheet", href="../../stylesheet/user/navbar.css")
script(src='../../script/confirmationModal.js' defer)
script(src='../../script/toast.js' defer)

body
  .container
    .header
      div
        h1 Order Detail
        p.order-id Order ID: #{order._id}
      .date
        p#createdDate(data-orderdate=order.created_at) Placed on #{createdDate}
        if isReturnable
          p hi
    
    .info-grid
      .info-section
        h2 Customer
        p= order.user.name
        p= order.user.email
      
      .info-section
        h2 Order Info
        p Pay method: #{order.payment_method}
        p Status: 
          if allCancelled
            span.status-badge.status-cancelled Cancelled
          else if allReturned
            span.status-badge.status-pending Return Requested
          else if order.returnRequest.status==='accepted'
            span.status-badge.status-returned Return Approved
          else if order.status === 'pending'
            span.status-badge.status-pending Pending
          else if order.status === 'processing'
            span.status-badge.status-processing Processing
          else if order.status === 'shipped'
            span.status-badge.status-shipped Shipped
          else if order.status === 'delivered' && !order.returnRequest.status
            span.status-badge.status-delivered Delivered
          else if order.status === 'cancelled'
            span.status-badge.status-cancelled Cancelled
          else if order.payment_status == false
            span.status-badge.status-failed Failed
          else if order.returnRequest.status
            span.status-badge.status-pending Return Requested
        if order.payment_status == false
          p#failed(data-date=order.deliveryDate)
            small Order Failed
        else if order.returnRequest.status == null && order.status !== 'delivered' && expectedDeliveryDate
          p#expectedDeliveryDate(data-date=expectedDeliveryDate)
            small Expected delivery on or before #{expectedDeliveryDate}
        else if order.returnRequest.status == null && deliveryDate
          p#deliveryDate(data-date=order.deliveryDate) Order Deliverd on #{deliveryDate}
      .info-section
        h2 Delivery Info
        - var address = order.shipping_address || order.user.billing_address
        p #{address.address || address.street}
        p #{address.city}, #{address.state} #{address.zip_code || address.zipCode}
        p #{address.country}
    
    .info-section
      h2 Product Info
      table
        thead
          tr
            th Product
            th Unit Price
            th Quantity
            th Total
            th Actions
        tbody
          each product in order.items
            - const hasPendingRequest = product.request && product.request.type != null
            tr
              td #{product.name}
              td $#{product.price.toFixed(2)}
                if product.offers.length != 0
                  - const discountValue = product.offers[0].discountValue || 0 
                  -const percentage =calculateDiscountPercentage(product.price + discountValue, discountValue) 
                  -const originalPrice=product.price + discountValue 
                  span.ms-2(style='font-size:12px; text-decoration-line: line-through; ') #{originalPrice}
                  small(style='font-size:11px;')   #{percentage}% OFF
              td #{product.quantity}
              td $#{(product.quantity * product.price).toFixed(2)}
              td
                if order.payment_status == false
                  span.status-badge.status-failed Failed
                else if order.status == "cancelled"
                  span.status-badge.status-cancelled Cancelled
                else if order.returnRequest && order.returnRequest.status
                  span.status-badge.status-pending Returned
                else if order.returnRequest.status==='accepted'
                  span.status-badge.status-returned Product Returned
                else if !hasPendingRequest
                  if order.status != 'delivered' && order.payment_status != false
                    button.btn.btn-cancel(onclick=`handleCancelProduct('${order._id}', '${product.productId}')`) Cancel
                  else if order.payment_status != false
                    button.btn.btn-return(onclick=`handleReturnProduct('${order._id}', '${product.productId}')`) Return
                else
                  if product.request.type == 'cancel'
                    span.status-badge.status-cancelled Cancelled
                  else if product.request.type == 'return'
                    if product.request.status == 'pending'
                      span.status-badge.status-pending Return Requested
                    if product.request.status == 'accepted'
                      span.status-badge.status-delivered Return Accepted

      span.total-section
        -const subtotal = Number( order.items.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2))
        -const coupon = Number(order.coupons[0].discount.toFixed(2) || 0 )
        -const total = Number(order.totalAmount.toFixed(2))
        -const tax = total-(subtotal+coupon)
        span.total-row 
          span Subtotal:
          span $#{subtotal} 
        .total-row
          span Tax:
          span $#{tax}
        if order.coupons && order.coupons.length > 0
          .total-row
            span Coupon Discount:
            span -$#{coupon}
        .total-row.grand-total
          span Total Amount:
          span $#{total}
    
    .action-button
      if order.payment_status == false
        button.btn.btn-failed.bg-danger.text-white(disabled) Order Failed
      if order.status !== 'cancelled' && order.status !== 'delivered' && !order.returnRequest.status && !allCancelled && order.payment_status != false 
        button.btn.btn-cancel(onclick=`handleCancelOrder('${order._id}')`) Cancel Order
      if order.status === 'delivered' && !order.returnRequest.status && !allReturned && isReturnable
        button.btn.btn-return(onclick=`handleReturnOrder('${order._id}')`) Return Order
      //if order.status === 'delivered' && !order.returnRequest.status && !allReturned && !isReturnable
      button.btn.btn-invoice.ms-3(onclick=`handleInvoice('${order._id}')`) Generate Invoice

script(src="../../script/user/userOrderUpdate.js")
style.
  body {
    font-family: 'Inter', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #081c15;
    color: #e0e0e0;
  }

  .container {
      max-width: 1200px;
      margin: 40px auto;
      background: #1b4332;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
      padding: 40px;
  }

  .header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 1px solid #2d6a4f;
      flex-wrap: wrap;
  }

  h1, h2 {
      color: #d8f3dc;
      margin: 0;
  }

  .order-id {
      font-size: 0.9rem;
      color: #95d5b2;
  }

  .info-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
      margin-bottom: 40px;
  }

  .info-section {
      background-color: #2d6a4f;
      border-radius: 8px;
      padding: 20px;
  }

  .info-section h2 {
      font-size: 1.2rem;
      margin-bottom: 15px;
      color: #d8f3dc;
  }

  .status-badge {
      display: inline-block;
      padding: 6px 12px;
      border-radius: 20px;
      font-weight: 600;
      font-size: 0.8rem;
      text-transform: uppercase;
  }

  .status-pending { background-color: #ffd166; color: #081c15; }
  .status-processing { background-color: #118ab2; color: #d8f3dc; }
  .status-shipped { background-color: #06d6a0; color: #081c15; }
  .status-delivered { background-color: #52b788; color: #081c15; }
  .status-cancelled { background-color: #e63946; color: #d8f3dc; }
  .status-failed { background-color: #ef476f; color: #d8f3dc; }
  .status-returned { background-color: #3a86ff; color: #ffffff; }

  table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0 10px;
  }

  th, td {
      padding: 15px;
      text-align: left;
      background-color: #2d6a4f;
  }

  th {
      background-color: #40916c;
      font-weight: 600;
  }

  tr:first-child th:first-child { border-top-left-radius: 8px; }
  tr:first-child th:last-child { border-top-right-radius: 8px; }
  tr:last-child td:first-child { border-bottom-left-radius: 8px; }
  tr:last-child td:last-child { border-bottom-right-radius: 8px; }

  .action-button {
      margin-top: 20px;
  }

  .btn {
      padding: 8px 16px;
      border-radius: 6px;
      font-weight: 500;
      text-transform: uppercase;
      font-size: 0.8rem;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-right: 10px;
      margin-bottom: 10px;
  }

  .btn-cancel { background-color: #e63946; color: #d8f3dc; border: none; }
  .btn-cancel:hover { background-color: #d62828; }
  .btn-return { background-color: #ffd166; color: #081c15; border: none; }
  .btn-return:hover { background-color: #ffc233; }
  .btn-invoice { background-color: #118ab2; color: #d8f3dc; border: none; }
  .btn-invoice:hover { background-color: #0e7a9d; }

  .total-section {
      background-color: #2d6a4f;
      border-radius: 8px;
      padding: 20px;
      margin-top: 30px;
  }

  .total-row {
      display: flex;
      justify-content: space-between;
      padding: 10px 0;
      border-bottom: 1px solid #40916c;
  }

  .total-row:last-child {
      border-bottom: none;
  }

  .grand-total {
      font-weight: 700;
      font-size: 1.2rem;
      color: #d8f3dc;
      margin-top: 10px;
  }

  /* Responsive styles */
  @media screen and (max-width: 1024px) {
      .container {
          margin: 20px;
          padding: 20px;
      }
      
      .info-grid {
          grid-template-columns: repeat(2, 1fr);
      }
  }

  @media screen and (max-width: 768px) {
      .info-grid {
          grid-template-columns: 1fr;
      }
      
      .header {
          flex-direction: column;
          align-items: flex-start;
      }
      
      .header .date {
          margin-top: 10px;
      }
      
      table, thead, tbody, th, td, tr {
          display: block;
      }
      
      thead tr {
          position: absolute;
          top: -9999px;
          left: -9999px;
      }
      
      tr {
          margin-bottom: 15px;
          border-radius: 8px;
          overflow: hidden;
      }
      
      td {
          position: relative;
          padding-left: 50%;
          text-align: right;
      }
      
      td:before {
          content: attr(data-label);
          position: absolute;
          left: 6px;
          width: 45%;
          padding-right: 10px;
          white-space: nowrap;
          text-align: left;
          font-weight: bold;
      }
      
      tr:first-child td:first-child,
      tr:first-child td:last-child,
      tr:last-child td:first-child,
      tr:last-child td:last-child {
          border-radius: 0;
      }
  }

  @media screen and (max-width: 480px) {
      .container {
          margin: 10px;
          padding: 15px;
      }
      
      h1 {
          font-size: 1.5rem;
      }
      
      .info-section h2 {
          font-size: 1rem;
      }
      
      .btn {
          width: 100%;
          margin-right: 0;
      }
      
      .total-section {
          padding: 15px;
      }
      
      .grand-total {
          font-size: 1rem;
      }
  }
